// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Factory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Factory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Factory", id.toString(), this);
  }

  static load(id: string): Factory | null {
    return store.get("Factory", id) as Factory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): i32 {
    let value = this.get("pairCount");
    return value.toI32();
  }

  set pairCount(value: i32) {
    this.set("pairCount", Value.fromI32(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityETH(): BigDecimal {
    let value = this.get("totalLiquidityETH");
    return value.toBigDecimal();
  }

  set totalLiquidityETH(value: BigDecimal) {
    this.set("totalLiquidityETH", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get derivedETH(): BigDecimal | null {
    let value = this.get("derivedETH");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedETH(value: BigDecimal | null) {
    if (value === null) {
      this.unset("derivedETH");
    } else {
      this.set("derivedETH", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get reserveETH(): BigDecimal {
    let value = this.get("reserveETH");
    return value.toBigDecimal();
  }

  set reserveETH(value: BigDecimal) {
    this.set("reserveETH", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get trackedReserveETH(): BigDecimal {
    let value = this.get("trackedReserveETH");
    return value.toBigDecimal();
  }

  set trackedReserveETH(value: BigDecimal) {
    this.set("trackedReserveETH", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }

  get liquidityPositions(): Array<string | null> {
    let value = this.get("liquidityPositions");
    return value.toStringArray();
  }

  set liquidityPositions(value: Array<string | null>) {
    this.set("liquidityPositions", Value.fromStringArray(value));
  }
}

export class LiquidityProvider extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityProvider entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityProvider entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityProvider", id.toString(), this);
  }

  static load(id: string): LiquidityProvider | null {
    return store.get("LiquidityProvider", id) as LiquidityProvider | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get liquidityPositions(): Array<string | null> {
    let value = this.get("liquidityPositions");
    return value.toStringArray();
  }

  set liquidityPositions(value: Array<string | null>) {
    this.set("liquidityPositions", Value.fromStringArray(value));
  }

  get totalLiquidityProvidedETH(): BigDecimal {
    let value = this.get("totalLiquidityProvidedETH");
    return value.toBigDecimal();
  }

  set totalLiquidityProvidedETH(value: BigDecimal) {
    this.set("totalLiquidityProvidedETH", Value.fromBigDecimal(value));
  }

  get totalLiquidityProvidedUSD(): BigDecimal {
    let value = this.get("totalLiquidityProvidedUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityProvidedUSD(value: BigDecimal) {
    this.set("totalLiquidityProvidedUSD", Value.fromBigDecimal(value));
  }

  get totalTokenStaked(): BigDecimal {
    let value = this.get("totalTokenStaked");
    return value.toBigDecimal();
  }

  set totalTokenStaked(value: BigDecimal) {
    this.set("totalTokenStaked", Value.fromBigDecimal(value));
  }

  get totalTokenStakedUSD(): BigDecimal {
    let value = this.get("totalTokenStakedUSD");
    return value.toBigDecimal();
  }

  set totalTokenStakedUSD(value: BigDecimal) {
    this.set("totalTokenStakedUSD", Value.fromBigDecimal(value));
  }

  get share(): BigDecimal {
    let value = this.get("share");
    return value.toBigDecimal();
  }

  set share(value: BigDecimal) {
    this.set("share", Value.fromBigDecimal(value));
  }

  get factorA(): BigDecimal {
    let value = this.get("factorA");
    return value.toBigDecimal();
  }

  set factorA(value: BigDecimal) {
    this.set("factorA", Value.fromBigDecimal(value));
  }

  get factorB(): BigDecimal {
    let value = this.get("factorB");
    return value.toBigDecimal();
  }

  set factorB(value: BigDecimal) {
    this.set("factorB", Value.fromBigDecimal(value));
  }

  get crops(): BigDecimal {
    let value = this.get("crops");
    return value.toBigDecimal();
  }

  set crops(value: BigDecimal) {
    this.set("crops", Value.fromBigDecimal(value));
  }

  get reward(): BigDecimal {
    let value = this.get("reward");
    return value.toBigDecimal();
  }

  set reward(value: BigDecimal) {
    this.set("reward", Value.fromBigDecimal(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get provider(): string {
    let value = this.get("provider");
    return value.toString();
  }

  set provider(value: string) {
    this.set("provider", Value.fromString(value));
  }

  get reserveETH(): BigDecimal {
    let value = this.get("reserveETH");
    return value.toBigDecimal();
  }

  set reserveETH(value: BigDecimal) {
    this.set("reserveETH", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get liquidityProvidedETH(): BigDecimal {
    let value = this.get("liquidityProvidedETH");
    return value.toBigDecimal();
  }

  set liquidityProvidedETH(value: BigDecimal) {
    this.set("liquidityProvidedETH", Value.fromBigDecimal(value));
  }

  get liquidityProvidedUSD(): BigDecimal {
    let value = this.get("liquidityProvidedUSD");
    return value.toBigDecimal();
  }

  set liquidityProvidedUSD(value: BigDecimal) {
    this.set("liquidityProvidedUSD", Value.fromBigDecimal(value));
  }
}

export class RewardPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RewardPositionSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RewardPositionSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RewardPositionSnapshot", id.toString(), this);
  }

  static load(id: string): RewardPositionSnapshot | null {
    return store.get(
      "RewardPositionSnapshot",
      id
    ) as RewardPositionSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidityProvider(): string {
    let value = this.get("liquidityProvider");
    return value.toString();
  }

  set liquidityProvider(value: string) {
    this.set("liquidityProvider", Value.fromString(value));
  }

  get totalLiquidityProvidedETH(): BigDecimal {
    let value = this.get("totalLiquidityProvidedETH");
    return value.toBigDecimal();
  }

  set totalLiquidityProvidedETH(value: BigDecimal) {
    this.set("totalLiquidityProvidedETH", Value.fromBigDecimal(value));
  }

  get totalLiquidityProvidedUSD(): BigDecimal {
    let value = this.get("totalLiquidityProvidedUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityProvidedUSD(value: BigDecimal) {
    this.set("totalLiquidityProvidedUSD", Value.fromBigDecimal(value));
  }

  get totalTokenStaked(): BigDecimal {
    let value = this.get("totalTokenStaked");
    return value.toBigDecimal();
  }

  set totalTokenStaked(value: BigDecimal) {
    this.set("totalTokenStaked", Value.fromBigDecimal(value));
  }

  get totalTokenStakedUSD(): BigDecimal {
    let value = this.get("totalTokenStakedUSD");
    return value.toBigDecimal();
  }

  set totalTokenStakedUSD(value: BigDecimal) {
    this.set("totalTokenStakedUSD", Value.fromBigDecimal(value));
  }

  get share(): BigDecimal {
    let value = this.get("share");
    return value.toBigDecimal();
  }

  set share(value: BigDecimal) {
    this.set("share", Value.fromBigDecimal(value));
  }

  get factorA(): BigDecimal {
    let value = this.get("factorA");
    return value.toBigDecimal();
  }

  set factorA(value: BigDecimal) {
    this.set("factorA", Value.fromBigDecimal(value));
  }

  get factorB(): BigDecimal {
    let value = this.get("factorB");
    return value.toBigDecimal();
  }

  set factorB(value: BigDecimal) {
    this.set("factorB", Value.fromBigDecimal(value));
  }

  get crops(): BigDecimal {
    let value = this.get("crops");
    return value.toBigDecimal();
  }

  set crops(value: BigDecimal) {
    this.set("crops", Value.fromBigDecimal(value));
  }

  get reward(): BigDecimal {
    let value = this.get("reward");
    return value.toBigDecimal();
  }

  set reward(value: BigDecimal) {
    this.set("reward", Value.fromBigDecimal(value));
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Price entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Price entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Price", id.toString(), this);
  }

  static load(id: string): Price | null {
    return store.get("Price", id) as Price | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eth(): BigDecimal {
    let value = this.get("eth");
    return value.toBigDecimal();
  }

  set eth(value: BigDecimal) {
    this.set("eth", Value.fromBigDecimal(value));
  }

  get cro(): BigDecimal {
    let value = this.get("cro");
    return value.toBigDecimal();
  }

  set cro(value: BigDecimal) {
    this.set("cro", Value.fromBigDecimal(value));
  }
}

export class HourlyPriceHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourlyPriceHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyPriceHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyPriceHistory", id.toString(), this);
  }

  static load(id: string): HourlyPriceHistory | null {
    return store.get("HourlyPriceHistory", id) as HourlyPriceHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get eth(): BigDecimal {
    let value = this.get("eth");
    return value.toBigDecimal();
  }

  set eth(value: BigDecimal) {
    this.set("eth", Value.fromBigDecimal(value));
  }

  get cro(): BigDecimal {
    let value = this.get("cro");
    return value.toBigDecimal();
  }

  set cro(value: BigDecimal) {
    this.set("cro", Value.fromBigDecimal(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakedFor(): string {
    let value = this.get("stakedFor");
    return value.toString();
  }

  set stakedFor(value: string) {
    this.set("stakedFor", Value.fromString(value));
  }

  get stakedBy(): string {
    let value = this.get("stakedBy");
    return value.toString();
  }

  set stakedBy(value: string) {
    this.set("stakedBy", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get tokenAmountUSD(): BigDecimal {
    let value = this.get("tokenAmountUSD");
    return value.toBigDecimal();
  }

  set tokenAmountUSD(value: BigDecimal) {
    this.set("tokenAmountUSD", Value.fromBigDecimal(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get term(): string {
    let value = this.get("term");
    return value.toString();
  }

  set term(value: string) {
    this.set("term", Value.fromString(value));
  }

  get stakedAt(): BigInt {
    let value = this.get("stakedAt");
    return value.toBigInt();
  }

  set stakedAt(value: BigInt) {
    this.set("stakedAt", Value.fromBigInt(value));
  }

  get unlockAt(): BigInt {
    let value = this.get("unlockAt");
    return value.toBigInt();
  }

  set unlockAt(value: BigInt) {
    this.set("unlockAt", Value.fromBigInt(value));
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staker", id.toString(), this);
  }

  static load(id: string): Staker | null {
    return store.get("Staker", id) as Staker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get stakeCount(): i32 {
    let value = this.get("stakeCount");
    return value.toI32();
  }

  set stakeCount(value: i32) {
    this.set("stakeCount", Value.fromI32(value));
  }

  get totalTokenStaked(): BigDecimal {
    let value = this.get("totalTokenStaked");
    return value.toBigDecimal();
  }

  set totalTokenStaked(value: BigDecimal) {
    this.set("totalTokenStaked", Value.fromBigDecimal(value));
  }

  get totalTokenStakedUSD(): BigDecimal {
    let value = this.get("totalTokenStakedUSD");
    return value.toBigDecimal();
  }

  set totalTokenStakedUSD(value: BigDecimal) {
    this.set("totalTokenStakedUSD", Value.fromBigDecimal(value));
  }

  get stakes(): Array<string | null> {
    let value = this.get("stakes");
    return value.toStringArray();
  }

  set stakes(value: Array<string | null>) {
    this.set("stakes", Value.fromStringArray(value));
  }
}

export class Staking extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staking entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staking entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staking", id.toString(), this);
  }

  static load(id: string): Staking | null {
    return store.get("Staking", id) as Staking | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeCount(): i32 {
    let value = this.get("stakeCount");
    return value.toI32();
  }

  set stakeCount(value: i32) {
    this.set("stakeCount", Value.fromI32(value));
  }

  get stakerCount(): i32 {
    let value = this.get("stakerCount");
    return value.toI32();
  }

  set stakerCount(value: i32) {
    this.set("stakerCount", Value.fromI32(value));
  }

  get totalTokenStaked(): BigDecimal {
    let value = this.get("totalTokenStaked");
    return value.toBigDecimal();
  }

  set totalTokenStaked(value: BigDecimal) {
    this.set("totalTokenStaked", Value.fromBigDecimal(value));
  }

  get totalTokenStakedUSD(): BigDecimal {
    let value = this.get("totalTokenStakedUSD");
    return value.toBigDecimal();
  }

  set totalTokenStakedUSD(value: BigDecimal) {
    this.set("totalTokenStakedUSD", Value.fromBigDecimal(value));
  }

  get stakes(): Array<string | null> {
    let value = this.get("stakes");
    return value.toStringArray();
  }

  set stakes(value: Array<string | null>) {
    this.set("stakes", Value.fromStringArray(value));
  }

  get liquidityProviders(): Array<string | null> {
    let value = this.get("liquidityProviders");
    return value.toStringArray();
  }

  set liquidityProviders(value: Array<string | null>) {
    this.set("liquidityProviders", Value.fromStringArray(value));
  }

  get totalCrops(): BigDecimal {
    let value = this.get("totalCrops");
    return value.toBigDecimal();
  }

  set totalCrops(value: BigDecimal) {
    this.set("totalCrops", Value.fromBigDecimal(value));
  }
}

export class StakingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakingSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakingSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakingSnapshot", id.toString(), this);
  }

  static load(id: string): StakingSnapshot | null {
    return store.get("StakingSnapshot", id) as StakingSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get stakeCount(): i32 {
    let value = this.get("stakeCount");
    return value.toI32();
  }

  set stakeCount(value: i32) {
    this.set("stakeCount", Value.fromI32(value));
  }

  get stakerCount(): i32 {
    let value = this.get("stakerCount");
    return value.toI32();
  }

  set stakerCount(value: i32) {
    this.set("stakerCount", Value.fromI32(value));
  }

  get totalTokenStaked(): BigDecimal {
    let value = this.get("totalTokenStaked");
    return value.toBigDecimal();
  }

  set totalTokenStaked(value: BigDecimal) {
    this.set("totalTokenStaked", Value.fromBigDecimal(value));
  }

  get totalTokenStakedUSD(): BigDecimal {
    let value = this.get("totalTokenStakedUSD");
    return value.toBigDecimal();
  }

  set totalTokenStakedUSD(value: BigDecimal) {
    this.set("totalTokenStakedUSD", Value.fromBigDecimal(value));
  }

  get totalCrops(): BigDecimal {
    let value = this.get("totalCrops");
    return value.toBigDecimal();
  }

  set totalCrops(value: BigDecimal) {
    this.set("totalCrops", Value.fromBigDecimal(value));
  }
}
