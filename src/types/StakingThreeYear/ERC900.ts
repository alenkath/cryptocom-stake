// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ERC900__getPersonalStakesResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<Address>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromAddressArray(this.value2));
    return map;
  }
}

export class ERC900__stakeHoldersResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class ERC900 extends ethereum.SmartContract {
  static bind(address: Address): ERC900 {
    return new ERC900("ERC900", address);
  }

  getPersonalStakeUnlockedTimestamps(_address: Address): Array<BigInt> {
    let result = super.call(
      "getPersonalStakeUnlockedTimestamps",
      "getPersonalStakeUnlockedTimestamps(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getPersonalStakeUnlockedTimestamps(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPersonalStakeUnlockedTimestamps",
      "getPersonalStakeUnlockedTimestamps(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPersonalStakes(_address: Address): ERC900__getPersonalStakesResult {
    let result = super.call(
      "getPersonalStakes",
      "getPersonalStakes(address):(uint256[],uint256[],address[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return new ERC900__getPersonalStakesResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toAddressArray()
    );
  }

  try_getPersonalStakes(
    _address: Address
  ): ethereum.CallResult<ERC900__getPersonalStakesResult> {
    let result = super.tryCall(
      "getPersonalStakes",
      "getPersonalStakes(address):(uint256[],uint256[],address[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC900__getPersonalStakesResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toAddressArray()
      )
    );
  }

  totalStakedFor(_address: Address): BigInt {
    let result = super.call(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_totalStakedFor(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPersonalStakeActualAmounts(_address: Address): Array<BigInt> {
    let result = super.call(
      "getPersonalStakeActualAmounts",
      "getPersonalStakeActualAmounts(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getPersonalStakeActualAmounts(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPersonalStakeActualAmounts",
      "getPersonalStakeActualAmounts(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  supportsHistory(): boolean {
    let result = super.call("supportsHistory", "supportsHistory():(bool)", []);

    return result[0].toBoolean();
  }

  try_supportsHistory(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsHistory",
      "supportsHistory():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPersonalStakeForAddresses(_address: Address): Array<Address> {
    let result = super.call(
      "getPersonalStakeForAddresses",
      "getPersonalStakeForAddresses(address):(address[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toAddressArray();
  }

  try_getPersonalStakeForAddresses(
    _address: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPersonalStakeForAddresses",
      "getPersonalStakeForAddresses(address):(address[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeHolders(param0: Address): ERC900__stakeHoldersResult {
    let result = super.call(
      "stakeHolders",
      "stakeHolders(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ERC900__stakeHoldersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_stakeHolders(
    param0: Address
  ): ethereum.CallResult<ERC900__stakeHoldersResult> {
    let result = super.tryCall(
      "stakeHolders",
      "stakeHolders(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC900__stakeHoldersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  defaultLockInDuration(): BigInt {
    let result = super.call(
      "defaultLockInDuration",
      "defaultLockInDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultLockInDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultLockInDuration",
      "defaultLockInDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lockInDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
